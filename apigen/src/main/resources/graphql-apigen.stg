// See https://github.com/antlr/stringtemplate4/blob/master/doc/groups.md
group apigen;

//////////////////////////////////////////////////////////////////////
// Define the objectType builder:
objectTypeFileName(model) ::= "<if(model.objectType)><model.name>.java<endif>"
objectTypeGenerator(model) ::= <<
package <model.packageName>;

<model.imports:{ it |

import <it>;}>
<if(model.idField)>
import java.util.List;
<endif>

public interface <model.name> {
    public static class Builder {
<model.fields:{ it |
<if(!it.args)>

        private <it.type> _<it.name>;
<endif>}>
        public Builder() {}
        public Builder(<model.name> src) {
<model.fields:{ it |
<if(!it.args)>

            _<it.name> = src.get<it.ucname>();
<endif>}>
        }

<model.fields:{ it |
<if(!it.args)>

        public Builder with<it.ucname>(<it.type> _<it.name>) {
            this._<it.name> = _<it.name>;
            return this;
        \}
<endif>}>
        public <model.name> build() {
            return new Impl(this);
        }
    }
    public static class Impl implements <model.name> {
<model.fields:{ it |
<if(!it.args)>

        private <it.type> _<it.name>;
<endif>}>
        protected Impl(Builder builder) {
<model.fields:{ it |
<if(!it.args)>

            this._<it.name> = builder._<it.name>;
<endif>}>
        }
<model.fields:{ it |
<if(!it.args)>

        @Override
        public <it.type> get<it.ucname>() {
            return _<it.name>;
        \}
<endif>}>
        @Override
        public String toString() {
            return "<model.name>{"
<model.fields,[true]:{ it,isFirst |
<if(!it.args)>

                 + "<if(!isFirst)>, <endif><it.name>=" + _<it.name>
<endif>}>

                 + "}";
        }
        // TODO: equals(Object) & hashCode()
    }
<if(model.idField)>
    public static class Unresolved implements <model.name> {
        private <model.idField.type> _id;
        public Unresolved(<model.idField.type> id) {
            this._id = id;
        }
        @Override
        public <model.idField.type> getId() {
            return _id;
        }
        @Override
        public String toString() {
            return "<model.name>.Unresolved{"
                 + "id=" + _id
                 + "}";
        }
    }
    public static interface Resolver extends com.distelli.graphql.Resolver\<<model.name>\> {
        public List\<<model.name>\> resolve(List\<<model.name>\> list);
    }
<endif>
<model.fields:{ it |

<if(it.args)>
    // TODO: extend any implemented interfaces...
    interface <it.ucname>Args {
<it.args:{ it |

        default <it.type> get<it.ucname>() { return null; \}}>
    \}
    public default <it.type> <it.name>(<it.ucname>Args args) { return null; \}
<else>
    public default <it.type> get<it.ucname>() { return null; \}
<endif>}>
}

>>

//////////////////////////////////////////////////////////////////////
// Define the object TypeProvider
objectTypeProviderFileName(model) ::= "<if(model.objectType)><model.name>TypeProvider.java<endif>"
objectTypeProviderGenerator(model) ::= <<
package <model.packageName>;

// TODO: import fieldTypes...
import com.distelli.graphql.MethodDataFetcher;
import com.distelli.graphql.ResolverDataFetcher;
import graphql.Scalars;
import graphql.schema.*;
import java.util.Arrays;
// To support optional injection:
import com.google.inject.Inject;
import javax.inject.Provider;

public class <model.name>TypeProvider implements Provider\<GraphQLObjectType> {
<model.dataResolvers:{ it |
<if(it.fieldType)>
    @Inject
    private <it.fieldType> <it.fieldName>;
<endif>}>
    @Inject(optional=true)
    private <model.name> _impl;
    @Inject
    protected <model.name>TypeProvider() {}
    @Override
    public GraphQLObjectType get() {
        return GraphQLObjectType.newObject()
            .name("<model.name>")
<model.fields:{ it |

            .field(GraphQLFieldDefinition.newFieldDefinition()
                .type(<it.graphQLType>)
                .name("<it.name>")
<if(it.args)>
                .argument(Arrays.asList(
<it.args:{ it |

                    GraphQLArgument.newArgument()
                    .name("<it.name>")
                    .type(<it.graphQLType>)
<if(it.defaultValue)>
                    .defaultValue(<it.defaultValue>)
<endif>
                    .build()}; separator=",\n">))
<endif>
<if(it.dataResolver)>
                .dataFetcher(new ResolverDataFetcher(
                      new MethodDataFetcher(
                          "<it.name>",
                          <if(it.args)><model.name>.<it.ucname>Args.class<else>null<endif>,
                          _impl),
                      <it.dataResolver.fieldName>,
                      <it.dataResolver.listDepth>))
<endif>
                .build())}>
            .build();
    }
}

>>

//////////////////////////////////////////////////////////////////////
// Define the interface builder:
interfaceFileName(model) ::= "<if(model.interfaceType)><model.name>.java<endif>"
interfaceGenerator(model) ::= <<
package <model.packageName>;

<model.imports:{ it |

import <it>;}>

public interface <model.name> {
<model.methods:{ it |
    interface <it.ucname>Args {
<it.args:{ it |
        default <it.type> get<it.ucname>() { return null; \}}>
    \}
    public default <it.type> <it.name>(<it.ucname>Args args) {
        return null;
    \}}>
<model.fields:{ it |

<if(it.args)>
    interface <it.ucname>Args {
<it.args:{ it |

        <it.type> get<it.ucname>();}>
    \}
    public <it.type> <it.name>(<it.ucname>Args args);
<else>
    public <it.type> get<it.ucname>();
<endif>}>
}

>>

//////////////////////////////////////////////////////////////////////
// Define the enum builder:
enumFileName(model) ::= "<if(model.enumType)><model.name>.java<endif>"
enumGenerator(model) ::= <<
package <model.packageName>;

<model.imports:{ it |

import <it>;}>

public enum <model.name> {
<model.fields:{ it |

    <it.name>,}>
}

>>